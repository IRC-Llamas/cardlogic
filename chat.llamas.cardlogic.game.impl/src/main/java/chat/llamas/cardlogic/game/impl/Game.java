// Copyright 2022 Llamas
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package chat.llamas.cardlogic.game.impl;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

import javax.naming.OperationNotSupportedException;

import com.beust.jcommander.JCommander;

import chat.llamas.cardlogic.domain.ArgumentTokenizer;
import chat.llamas.cardlogic.domain.GameState;
import chat.llamas.cardlogic.domain.commands.BetCommand;
import chat.llamas.cardlogic.domain.commands.CallCommand;
import chat.llamas.cardlogic.domain.commands.CancelGameCommand;
import chat.llamas.cardlogic.domain.commands.CheckCommand;
import chat.llamas.cardlogic.domain.commands.FoldCommand;
import chat.llamas.cardlogic.domain.commands.JoinGameCommand;
import chat.llamas.cardlogic.domain.commands.LeaveGameCommand;
import chat.llamas.cardlogic.domain.commands.MuckCommand;
import chat.llamas.cardlogic.domain.commands.RaiseCommand;
import chat.llamas.cardlogic.domain.commands.ShowCommand;
import chat.llamas.cardlogic.domain.commands.StartGameCommand;
import chat.llamas.cardlogic.domain.commands.ViewCardsCommand;
import chat.llamas.cardlogic.domain.game.PlayerInterface;
import chat.llamas.cardlogic.game.api.CommandEventBusInterface;
import chat.llamas.cardlogic.game.api.GameEventMediatorInterface;
import chat.llamas.cardlogic.game.api.GameInterface;
import chat.llamas.cardlogic.game.api.RoundInterface;
import io.reactivex.rxjava3.annotations.NonNull;
import io.reactivex.rxjava3.core.Observable;
import io.reactivex.rxjava3.disposables.Disposable;
import io.reactivex.rxjava3.subjects.PublishSubject;

public class Game implements GameInterface {

	private Map<PlayerInterface, Boolean> players = new LinkedHashMap<>();
	
	private GameState gameState = GameState.INACTIVE;

	private RoundInterface currentRound = null;
	
	private CommandEventBusInterface eventBus = null;
	
	private PublishSubject<GameState> gameStateChangedEvent;
	
	private GameEventMediatorInterface gameEventMediator = null;
	
	private Disposable startGameSubscription = null;
	
	{
		this.startGameSubscription = getCommandEventBus().onCommand(StartGameCommand.class).subscribe(this::startGame);
	}

	@Override
	public RoundInterface getCurrentRound() {
		return currentRound;
	}

	@Override
	public GameState getGameState() {
		return gameState;
	}
	
	private PublishSubject<GameState> getGameStateChangedEvent() {
		if (Objects.isNull(gameStateChangedEvent)) {
			gameStateChangedEvent = PublishSubject.create();
		}
		return gameStateChangedEvent;
	}
	
	public Observable<GameState> onGameStateChanged() {
		return getGameStateChangedEvent();
	}

	@Override
	public GameEventMediatorInterface getGameEventMediator() {
		if (Objects.isNull(gameEventMediator)) {
			gameEventMediator = new GameEventMediator(this);
		}
		return gameEventMediator;
	}

	@Override
	public PlayerInterface getStartingPlayer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Map<PlayerInterface, Boolean> getPlayers() {
		return players;
	}

	@Override
	public void acceptCommand(String command) throws OperationNotSupportedException {
		getCommandEventBus().execute(command);
	}

	@Override
	public CommandEventBusInterface getCommandEventBus() {
		if (eventBus == null) {
			eventBus = new CommandEventBus();
		}
		return eventBus;
	}

	@Override
	public void setGameState() {
		// TODO Auto-generated method stub
		
	}
	
	private void startGame(StartGameCommand command) {
		if (Objects.equals(getGameState(), GameState.INACTIVE)) {
			getGameEventMediator().startGame(command);
		}
		else {
			// TODO: Throw an UnsupportedOperationException.
		}
	}
}
